{
    /**
     *  ENFORCING OPTIONS
     *  ====================
     */

    "bitwise"       : false,    // Prohibit bitwise operators (&, |, ^, etc.).
    "camelcase"     : true,     // Force all variable names to use either camelCase style or UPPER_CASE with underscores.
    "curly"         : true,     // Require {} for every new block or scope.
    "eqeqeq"        : true,     // Prohibit use of == and != in favor of === and !==.
    "es3"           : true,     // Support legacy browser and javascript environments.
    "forin"         : false,    // Tolerate `for in` loops without `hasOwnPrototype`.
    "freeze"        : true,     // Prohibits overwriting prototypes of native objects such as Array and Date.
    "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "indent"        : 4,        // Specify indentation spacing
    "latedef"       : true,     // Prohibit variable use before definition.
    "newcap"        : true,     // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.
    "noempty"       : true,     // Prohibit use of empty blocks.
    "nonew"         : true,     // Prohibit use of constructors for side-effects.
    "plusplus"      : false,    // Prohibit use of `++` & `--`.
    "quotmark"      : "single", // Enforces the consistency of quotation marks used throughout your code.
    "undef"         : true,     // Require all non-global variables be declared before they are used.
    "unused"        : true,     // Warn when variables are defined but never used.
    "strict"        : false,    // Require `use strict` pragma in every file.

    /**
     *  RELAXING OPTIONS
     *  ====================
     */

    //"asi"           : false,    // Suppresses warnings about missing semicolons.
    "boss"          : true,     // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "eqnull"        : true,     // Tolerate use of `== null`.
    "esnext"        : false,    // Tells JSHint that your code uses ECMAScript 6 specific syntax.
    "evil"          : false,    // Tolerate use of `eval`.
    "expr"          : false,    // Tolerate `ExpressionStatement` as Programs.
    "funcscope"     : true,     // Suppresses warnings about declaring variables inside of control structures while accessing them later from the outside.
    "globalstrict"  : false,    // Allow global "use strict" (also enables 'strict').
    "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma"      : false,    // Suppresses warnings about comma-first coding style.
    "loopfunc"      : true,     // Allow functions to be defined within loops.
    "notypeof"      : false,    // Suppresses warnings about invalid typeof operator values.
    "shadow"        : true,     // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub"           : false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "smarttabs"     : false,    // Suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only.
    "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`.

    /**
     *  ENVIRONMENTS
     *  ====================
     */

    "browser"       : true,     // Define globals exposed by modern browsers e.g. `window`, `document`.
    "devel"         : true,     // Allow developments statements e.g. `console.log();`.

    /**
     *  CUSTOM GLOBALS
     *  ====================
     */

    "globals"       : {
        "define"    : false,
        "Game"      : false,
        "GameOverlay": false,
        "Phaser"    : false,
        "require"   : false
    }
}
